/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Abril: 2008 - Simplificado apra solo interpretaciï¿½n
2020: Obstaculos


 **/

options 
{
	LOOKAHEAD=2; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;


@SuppressWarnings("serial")
public class Robot 
{
//public ArrayList<String> variables = new ArrayList<String>();
public static ArrayList<String> funciones = new ArrayList<String>();
public static HashMap<String, Integer > variables= new HashMap<String, Integer>();

public static HashMap<String, String > param= new HashMap<String, String>();
private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}
public void main(String args []) throws ParseException

  {
    Robot parser = new Robot(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression from the robot language :");
      try
      {
        switch (Robot.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        //Robot.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Robot)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < WALK : "walk" >
| < ROT : "rotate" >
| < LOOK : "look" >
| < DROP : "drop" >
| < FREE : "free" >
| < PICK : "pick" >
| < GRAB : "grab" >
| < WT : "walkTo" >
| < NOP : "NOP" >
| < BLOCK : "block" >
| < IF : "if" >
| < DEF : "define" >
| < BLOCKED : "blocked?" >
| < FACING : "facing?" >
| < CAN : "can" >
| < NOT : "not" >
| < PI : "(" >
| < PD : ")" >
| < NORTH : "N" >
| < SOUTH : "S" >
| < EAST : "E" >
| < WEST : "W" >
| < IZQ : "left" >
| < DER : "right" >
| < BACK : "back" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < ID : (< LETTER >)+ >
| < #LETTER : [ "a" - "z"] >
}

int one_line():
{}
{
  action()
| definitionVariable()
| definitionFuncion()
| condition()
| usarFuncion()
{return 0 ;}
}

void action():
{}
{
    < PI > (numericAction()|directionAction()) < PD >
  
}

void numericAction():
{}
{
  (< WALK >|< DROP >|< FREE >|< PICK >|< GRAB >) (< CONSTANT >|usarVariable())
| < WT > (< CONSTANT >|usarVariable()) cardinal()  
}
  
void directionAction():
{}
{
  < ROT > (< IZQ >|< DER >|< BACK >)
| < LOOK > cardinal()
}

void cardinal():
{}
{
  < NORTH >
| < SOUTH >
| < EAST >
| < WEST >
}

void definitionVariable():
{}
{
  < PI ><DEF > variable()< PD >

}
void definitionFuncion():
{}
{
  < PI ><DEF >function()< PD >
}
void variable():
{
  String var = "";
  int valor=0;
}
{
  < ID >
  {
    try
    {
      var = token.toString();
      
    }
    catch (Exception e){}
  }
  < CONSTANT >
  {
    try {
      valor=Integer.parseInt(token.toString());
      variables.put(var,valor);
    }
    catch(Exception e) { }
}
}
void function():
{
  String var = "";
}
{
  < ID >
  {
    try
    {
      var = token.toString();
      funciones.add(var);
    }
    catch (Exception e){}
  }
	< PI >
	< ID >
	{
	while(token.toString()!= ")")
	{
	param.put(token.toString(),"");
	token=token.next;
	}
    }
    
	< PD >
	
  block()
}

void block():
{}
{
 < BLOCK >  (action()|usarFuncion())+    
}

void usarVariable():
{}
{
  < PI > < PD >
}

void usarFuncion():
{}
{
  < PI >
  < ID >
	{
	  try {
	if(!funciones.contains(token.toString()))
	{
	  throw new Exception("No se ha definido una funcion con ese nombre");
	}
	  }
	  catch(Exception e)
	  { }
	}
	< PI >
	{
	  int i=0;
	   int tamaño=param.keySet().toArray().length;
	  String[] parametros=new String[tamaño];
	 
	  while(token.toString()!=")")
	{
	 
	    param.replace(parametros[i],token.toString());
	    
	   i++;
	token=token.next;
	}
 }
 < PD >
 
}  
  
void condition():
{}
{
  < PI > < IF > < PD > 
}

 






	





TOKEN: /* Nombres de Comandos */
{

			<T_MOVER:  "Move">
		| 	<T_TURNRIGHT: "TURNRIGHT">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
		

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}



	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		String salida=new String();
		
	}
	
	{
		(
		   <T_TURNRIGHT> "(" ")" {world.turnRight();salida = "Comando GIRAR DER";}
		| 	<T_MOVER>  "(" x=numero() ")" {world.moveForward(x);salida = "Comando MOVER ADELANTE";}  
		|  <T_PONER> "("  objetoPoner() ")" {	salida = "Comando:  PONER"; }					  			
		|  <T_RECOGER> "("  objetoRecoger()  ")"	{salida = "Comando:  Recoger";}
		)  

		{
		    try {
	    			        Thread.sleep(2000);
	    			    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    			    }
	    			 
			sistema.append(salida);
			return true;
		}

		

		| <EOF> {return false;} 
	}

	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f);})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<CONSTANT>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Numero demasiado grande: "+token.image+"!!");
			}
			return total;
		}
	}

	

