/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Abril: 2008 - Simplificado apra solo interpretaciï¿½n
2020: Obstaculos


 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;


@SuppressWarnings("serial")
public class Robot 
{

	public  ArrayList<String> funciones = new ArrayList<String>();
	public  HashMap<String, Integer > variables= new HashMap<String, Integer>();

	public  HashMap<String, String > param= new HashMap<String, String>();
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<T_MOVER:  "Move">
		| 	<T_TURNRIGHT: "TURNRIGHT">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
 | < WALK : "walk" >
| < ROT : "rotate" >
| < LOOK : "look" >
| < DROP : "drop" >
| < FREE : "free" >
| < PICK : "pick" >
| < GRAB : "grab" >
| < WT : "walkTo" >
| < NOP : "NOP" >
| < BLOCK : "block" >
| < IF : "if" >
| < DEF : "define" >
| < BLOCKED : "blocked?" >
| < FACING : "facing?" >
| < CAN : "can" >
| < NOT : "not" >
| < PI : "(" >
| < PD : ")" >
| < NORTH : "N" >
| < SOUTH : "S" >
| < EAST : "E" >
| < WEST : "W" >
| < IZQ : "left" >
| < DER : "right" >
| < BACK : "back" >

		
		

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}
TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < ID : (< LETTER >)+ >
| < #LETTER : [ "a" - "z"] >
}


	
	boolean command(StringBuffer sistema) :
	{	
		
		int x=0;
		String salida=new String();
		String nombreVariable="";
		
		String nombreFuncion="";
		
	}
	
	{
	  < PI >
	  (
	    <T_TURNRIGHT> "(" ")" {world.turnRight();salida = "Comando GIRAR DER";}	  | x=walk() { world.moveForward(x); salida = "el comando walk fue ejecutado y el robot caminó "+x+" pasos"; }
	  | salida=define() 
//|otro metodo|otro metodo|etc
      )
      < PD >	
		{
		    try {
	    			        Thread.sleep(2000);
	    			    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    			    }
	    			 
			sistema.append(salida);
			return true;
		}

		

		| <EOF> {return false;} 
	}

	
	

	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f);})	 

	}


	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<CONSTANT>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Numero demasiado grande: "+token.image+"!!");
			}
			return total;
		}
	}



	int walk():
	{int rta;}
	{
	  
	 < WALK > rta=numero()
	  { return rta;}
	}
	String define():
	{
	  String rta="";
	 
	}
	{
	  < DEF >
		(		  rta=variable()|rta=funcion())
		{
		  return rta; }
	}

	String variable():
	{
	  String rta="";
	  String nombreVariable="";
	  int x;
	}
	 { <ID > { nombreVariable=token.image; } x=numero()
	 {variables.put(nombreVariable, x);
	 rta= "se guardó la variable "+nombreVariable+" con un valor de "+x;return rta; }}


	String funcion():
	{
	} {< PI ><PD >
	{ return "pedo"; }} 






void directionAction():
{}
{
  < ROT > (< IZQ >|< DER >|< BACK >)
| < LOOK > cardinal()
}

void cardinal():
{}
{
  < NORTH >
| < SOUTH >
| < EAST >
| < WEST >
}

void definitionVariable():
{}
{
  < PI ><DEF > variable()< PD >

}
void definitionFuncion():
{}
{
  < PI ><DEF >function()< PD >
}
void variablessss():
{
  String var = "";
  int valor=0;
}
{
  < ID >
  {
    try
    {
      var = token.toString();
      
    }
    catch (Exception e){}
  }
  < CONSTANT >
  {
    try {
      valor=Integer.parseInt(token.toString());
      variables.put(var,valor);
    }
    catch(Exception e) { }
}
}
void function():
{
  String var = "";
}
{
  < ID >
  {
    try
    {
      var = token.toString();
      funciones.add(var);
    }
    catch (Exception e){}
  }
	< PI >
	< ID >
	{
	while(token.toString()!= ")")
	{
	param.put(token.toString(),"");
	token=token.next;
	}
    }
    
	< PD >
	
  block()
}

void block():
{}
{
 < BLOCK >  (usarFuncion())+    
}


void usarFuncion():
{}
{
  < PI >
  < ID >
	{
	  try {
	if(!funciones.contains(token.toString()))
	{
	  throw new Exception("No se ha definido una funcion con ese nombre");
	}
	  }
	  catch(Exception e)
	  { }
	}
	< PI >
	{
	  int i=0;
	   int tamaño=param.keySet().toArray().length;
	  String[] parametros=new String[tamaño];
	 
	  while(token.toString()!=")")
	{
	 
	    param.replace(parametros[i],token.toString());
	    
	   i++;
	token=token.next;
	}
 }
 < PD >
 
}  
  
void condition():
{}
{
  < PI > < IF > < PD > 
}

 






	

	

	