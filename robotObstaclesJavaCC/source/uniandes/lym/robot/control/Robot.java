/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;


@SuppressWarnings("serial")
public class Robot implements RobotConstants {
//public ArrayList<String> variables = new ArrayList<String>();
public ArrayList<String> funciones = new ArrayList<String>();
public HashMap<String, Integer > variables= new HashMap<String, Integer>();
public HashMap<String, String > param= new HashMap<String, String>();
public static void main(String args []) throws ParseException
  {
    Robot parser = new Robot(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression from the robot language :");
      try
      {
        switch (Robot.one_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        TIP.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PI:
      action();
      break;
      definition();
      break;
      condition();
      break;
      usarFuncion();
 {if (true) return 0;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void action() throws ParseException {
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WALK:
    case DROP:
    case FREE:
    case PICK:
    case GRAB:
    case WT:
      numericAction();
      break;
    case ROT:
    case LOOK:
      directionAction();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PD);
  }

  final public void numericAction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WALK:
    case DROP:
    case FREE:
    case PICK:
    case GRAB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WALK:
        jj_consume_token(WALK);
        break;
      case DROP:
        jj_consume_token(DROP);
        break;
      case FREE:
        jj_consume_token(FREE);
        break;
      case PICK:
        jj_consume_token(PICK);
        break;
      case GRAB:
        jj_consume_token(GRAB);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        jj_consume_token(CONSTANT);
        break;
      case PI:
        usarVariable();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case WT:
      jj_consume_token(WT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        jj_consume_token(CONSTANT);
        break;
      case PI:
        usarVariable();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      cardinal();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void directionAction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ROT:
      jj_consume_token(ROT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IZQ:
        jj_consume_token(IZQ);
        break;
      case DER:
        jj_consume_token(DER);
        break;
      case BACK:
        jj_consume_token(BACK);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LOOK:
      jj_consume_token(LOOK);
      cardinal();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void cardinal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      jj_consume_token(NORTH);
      break;
    case SOUTH:
      jj_consume_token(SOUTH);
      break;
    case EAST:
      jj_consume_token(EAST);
      break;
    case WEST:
      jj_consume_token(WEST);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void definition() throws ParseException {
    jj_consume_token(PI);
    jj_consume_token(DEF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      variable();
      break;
      function();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PD);
  }

  final public void variable() throws ParseException {
  String var = "";
  int valor=0;
    jj_consume_token(ID);
    try
    {
      var = token.image;

    }
    catch (Exception e){}
    jj_consume_token(CONSTANT);
    try {
      valor=Integer.parseInt(token.image);
      variables.put(var,valor);
    }
    catch(Exception e) { }
  }

  final public void function() throws ParseException {
  String var = "";
    jj_consume_token(ID);
    try
    {
      var = token.image;
      funciones.add(var);
    }
    catch (Exception e){}
    jj_consume_token(PI);
        while(token!=null)
        {
        param.put(token.image,"");
        token.getNextToken();
        }
    jj_consume_token(PD);
    block();
  }

  final public void block() throws ParseException {
    jj_consume_token(BLOCK);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PI:
        action();
        break;
        usarFuncion();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PI:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_1;
      }
    }
  }

  final public void usarVariable() throws ParseException {
    jj_consume_token(PI);
    jj_consume_token(PD);
  }

  final public void usarFuncion() throws ParseException {
    jj_consume_token(PI);
    jj_consume_token(ID);
          try {
        if(!funciones.contains(token.image))
        {
          {if (true) throw new Exception("No se ha definido una funcion con ese nombre");}
        }
          }
          catch(Exception e)
          { }
    jj_consume_token(PI);
          int i=0;
           int tamaño=param.keySet().toArray().length;
          String[] parametros=new String[tamaño];

          while(token!=null)
        {

            param.replace(parametros[i],token.image);

           i++;
        token.getNextToken();
        }
    jj_consume_token(PD);
  }

  final public void condition() throws ParseException {
    jj_consume_token(PI);
    jj_consume_token(IF);
    jj_consume_token(PD);
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x1fe0,0xf20,0x40200000,0x40200000,0x1f20,0x38000000,0xc0,0x7800000,0x0,0x200000,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
